#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import neal
''' An implementation of a simulated annealing sampler. '''

# https://docs.ocean.dwavesys.com/en/latest/overview/cpu.html

''' Calculates the energy of all possible samples for a given problem. This example solves a two-variable Ising model classically on your local machine. The two samples requested and generated by this classical solver on your local machine vary by execution. '''

solver = neal.SimulatedAnnealingSampler()
response = solver.sample_ising({'a': -0.5, 'b': 1.0}, {('a', 'b'): -1}, num_reads=2)
print(response)

response.data_vectors['energy']
print('response.data_vectors-energy', response.data_vectors['energy'])

# https://docs.ocean.dwavesys.com/projects/neal/

sampler = neal.SimulatedAnnealingSampler()

h = {0: -1, 1: -1}
J = {(0, 1): -1}
response = sampler.sample_ising(h, J)
print(response)
